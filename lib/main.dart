import 'package:flutter/material.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'package:firebase_core/firebase_core.dart';

import 'services/push_service.dart';
// NOTE: you must provide firebase_options.dart generated by FlutterFire CLI
import 'firebase_options.dart';
import 'theme.dart';
import 'views/auth/login_screen.dart';
import 'services/auth_flag_service.dart';
import 'services/biometric_service.dart';
import 'services/theme_service.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Inicializar dados de localização para pt_BR
  await initializeDateFormatting('pt_BR', null);
  // Inicializar serviço de tema (lê preferência salva)
  await ThemeService.init();
  
  // Inicializar Firebase (usa DefaultFirebaseOptions gerado)
  try {
    await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
    await PushService.init();
  } catch (e) {
    // Se Firebase falhar, continuamos sem push mas logamos o erro
    // ignore: avoid_print
    print('Firebase init failed: $e');
  }
  
  runApp(const PontoDigitalApp());
}

class PontoDigitalApp extends StatelessWidget {
  const PontoDigitalApp({super.key});

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<ThemeMode>(
      valueListenable: ThemeService.themeModeNotifier,
      builder: (context, mode, child) {
        return MaterialApp(
          title: 'Ponto Digital',
          theme: AppTheme.lightTheme,
          darkTheme: AppTheme.darkTheme,
          themeMode: mode,
          home: const BiometricGate(),
          debugShowCheckedModeBanner: false,
        );
      },
    );
  }
}

/// Widget que exige biometria se o usuário já logou pelo menos uma vez
class BiometricGate extends StatefulWidget {
  const BiometricGate({super.key});

  @override
  State<BiometricGate> createState() => _BiometricGateState();
}

class _BiometricGateState extends State<BiometricGate> {
  bool _loading = true;
  bool _authOk = false;
  String? _error;

  @override
  void initState() {
    super.initState();
    _checkAuth();
  }

  Future<void> _checkAuth() async {
    setState(() { _loading = true; _error = null; });
    final hasLogged = await AuthFlagService.hasLoggedInOnce();
    if (!hasLogged) {
      setState(() { _authOk = true; _loading = false; });
      return;
    }
    final available = await BiometricService.isBiometricAvailable();
    if (!available) {
      setState(() { _authOk = true; _loading = false; });
      return;
    }
    final ok = await BiometricService.authenticate(reason: 'Confirme sua identidade para acessar o app');
    setState(() {
      _authOk = ok;
      _loading = false;
      _error = ok ? null : 'Autenticação biométrica falhou ou foi cancelada.';
    });
  }

  @override
  Widget build(BuildContext context) {
    if (_loading) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }
    if (_authOk) {
      return const LoginScreen();
    }
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.fingerprint, size: 64),
            const SizedBox(height: 24),
            Text(_error ?? 'Falha na autenticação biométrica.'),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: _checkAuth,
              child: const Text('Tentar novamente'),
            ),
          ],
        ),
      ),
    );
  }
}

